[gd_scene load_steps=11 format=2]

[ext_resource path="res://Scenes/Actors/Actor.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scripts/Actors/Player.gd" type="Script" id=2]
[ext_resource path="res://Resources/Shaders/fog.shader" type="Shader" id=3]
[ext_resource path="res://Resources/2DLight.png" type="Texture" id=4]
[ext_resource path="res://icon.png" type="Texture" id=5]
[ext_resource path="res://Resources/Sprites/progress_under.png" type="Texture" id=6]

[sub_resource type="Animation" id=1]
resource_name = "dead"
length = 1.1
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6, 0.8, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 30, 31, 32, 33, 34, 35 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1.1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "dying_finished"
} ]
}

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform vec4 transparent : hint_color;
uniform vec4 inner : hint_color;
uniform vec4 outer : hint_color;

uniform float inner_threshold = 0.4;
uniform float outer_threshold = 0.15;
uniform float soft_edge = 0.04;
uniform vec2 center = vec2(0.5, 0.8);

uniform int OCTAVES = 6;

float rand(vec2 coord){
    return fract(sin(dot(coord, vec2(12.9898,78.233)))*
	43758.5453123);
}
    
float noise(vec2 coord){
    vec2 i = floor(coord);
    vec2 f = fract(coord);
    float a = rand(i); //left top corner
    float b = rand(i + vec2(1.0,0.0));
    float c = rand(i + vec2(0.0,1.0));
    float d = rand(i + vec2(1.0,1.0));
    
    vec2 cubic = f * f * (3.0 - 2.0 * f);
    
    return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
    float value = 0.0;
    float scale = 0.5;
    for (int i = 0; i < OCTAVES; ++i){
        value += noise(coord) * scale;
        coord *= 2.0;
        scale *= scale;
    }
    return value;
}

float overlay(float base, float top){
	if (base < 0.5) {
		return 2.0 * base * top;
	}
	else
	{
		return 1.0 - 2.0 * (1.0 - base) * (1.0 - top);
	}
}	

float egg_shape(vec2 coord, float radius){
	vec2 diff = abs(coord - center);
	
	if(coord.y < center.y){
		diff.y /= 2.0;
	} else {
		diff.y *= 2.0;
	}
	
	float dist = sqrt(diff.x * diff.x + diff.y * diff.y) / radius;
	float value = sqrt(1.0 - dist * dist);
	return clamp(value,0.0,1.0);
}

void fragment(){
	vec2 coord = UV * 8.0;
	vec2 fbmcoord = coord / 6.0;
	
	float egg_s = egg_shape(UV,0.4);
	egg_s += egg_shape(UV, 0.2) / 2.0; 
	
	float noise1 = noise(coord + vec2(TIME * 0.25, TIME * 4.0));
	float noise2 = noise(coord + vec2(TIME * 0.5, TIME * 6.0));
	float combine_noise = (noise1 + noise2) / 2.0;
	
	float fbm_noise = fbm(fbmcoord + vec2(0.0, TIME * 3.0));
	fbm_noise = overlay(fbm_noise,UV.y);
	
	float everything_combined = combine_noise * fbm_noise * egg_s;
	
	if(everything_combined < outer_threshold){
		COLOR = transparent;
	} else if(everything_combined < outer_threshold + soft_edge){
		COLOR = mix(transparent, outer,
		 (everything_combined - outer_threshold) / soft_edge);
	}
	else if (everything_combined < inner_threshold){
		COLOR = outer;
	}else if(everything_combined < inner_threshold + soft_edge){
		COLOR = mix(outer, inner,
		 (everything_combined - inner_threshold) / soft_edge);
	} 
	else {
		COLOR = inner;
	}
	
	//COLOR = vec4(vec3(everything_combined),1.0);
}

"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/transparent = Color( 0, 0, 0, 0 )
shader_param/inner = Color( 0.576471, 0.52549, 0.411765, 0.0588235 )
shader_param/outer = Color( 1, 0.913725, 0.00784314, 1 )
shader_param/inner_threshold = 0.3
shader_param/outer_threshold = 0.05
shader_param/soft_edge = 0.04
shader_param/center = Vector2( 0.5, 0.8 )
shader_param/OCTAVES = 6

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 3 )
shader_param/color = Vector3( 0.3, 0.6, 0.9 )
shader_param/OCTAVES = 6

[node name="Player" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="sprite" parent="." index="1"]
frame = 30

[node name="AnimationPlayer" parent="." index="3"]
anims/dead = SubResource( 1 )

[node name="Light2D" type="Light2D" parent="." index="4"]
visible = false
position = Vector2( 1.36273, -2.91114 )
texture = ExtResource( 4 )
texture_scale = 0.25
color = Color( 0.972549, 0.843137, 0.576471, 1 )
energy = 2.0

[node name="FlameShader" type="Sprite" parent="Light2D" index="0"]
material = SubResource( 3 )
position = Vector2( 0, -1 )
scale = Vector2( 0.6, 0.6 )
texture = ExtResource( 5 )

[node name="Freezer" type="Sprite" parent="." index="5"]
visible = false
material = SubResource( 4 )
position = Vector2( 0.416089, -1.90735e-06 )
scale = Vector2( 10, 10 )
texture = ExtResource( 6 )
